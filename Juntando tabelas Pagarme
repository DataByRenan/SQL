-- ===========================================
-- Título: Juntar dados da V1 e V5 da Pagarme 
-- Autor: Renan Serra
-- Descrição: Query para calcular juntar dados das diferentes versões da API da Pagarme trazendo os dados 
-- Nota: Nomes de banco e tabelas foram anonimizados para segurança
-- Plataforma: BigQuery
-- Data: 22/09/2025
-- ===========================================

-- CREATE SCHEMA IF NOT EXISTS `banco-de-dados-proper-tratado.financeiroproperjackyampi`;

-- CREATE TABLE `banco-de-dados-proper-tratado.financeiroproperjackyampi.pagarme_yampi` AS

-- CREATE SCHEMA IF NOT EXISTS `SCHEMA_TRATADO`;
-- DROP TABLE IF EXISTS `SCHEMA_TRATADO.PAGARME_YAMPI`;
-- CREATE TABLE `SCHEMA_TRATADO.PAGARME_YAMPI` AS

WITH fee AS (
    SELECT 1 AS installments, 0.0312 AS percentage
    UNION ALL SELECT 2, 0.0554
    UNION ALL SELECT 3, 0.0670
    UNION ALL SELECT 4, 0.0786
    UNION ALL SELECT 5, 0.0902
    UNION ALL SELECT 6, 0.1018
    UNION ALL SELECT 7, 0.1152
    UNION ALL SELECT 8, 0.1268
    UNION ALL SELECT 9, 0.1384
    UNION ALL SELECT 10, 0.1500
    UNION ALL SELECT 11, 0.1616
    UNION ALL SELECT 12, 0.1732
) -- Taxa do cartão de crédito

SELECT 
    CAST(a.id AS STRING) AS id, 
    DATETIME(a.created_at, "America/Sao_Paulo") AS created_at_brasilia,
    a.customer_name,
    a.customer_email,
    ROUND(b.charges_amount, 2) AS charges_amount,
    CASE
        WHEN b.charges_status = 'paid' AND b.charges_payment_method = 'credit_card' 
            THEN CAST(0.90 AS FLOAT64)
        WHEN b.charges_status = 'failed' AND b.charges_payment_method = 'credit_card'
            THEN CAST(0.30 AS FLOAT64)
        ELSE 0
    END AS cost,
    CASE
        WHEN b.charges_payment_method = 'credit_card' AND b.charges_status = 'paid' 
            THEN ROUND(b.charges_amount * f.percentage, 2)
        WHEN b.charges_payment_method = 'pix' AND b.charges_status = 'paid'
            THEN CAST(ROUND(b.charges_amount * 0.0092, 2) AS FLOAT64)
        ELSE 0
    END AS processing_fee,
    CASE
        WHEN b.charges_status = 'paid' AND b.charges_payment_method = 'credit_card'
            THEN ROUND(b.charges_amount - (b.charges_amount * f.percentage + 0.90), 2)
        WHEN b.charges_status = 'paid' AND b.charges_payment_method = 'pix'
            THEN ROUND(b.charges_amount - b.charges_amount * 0.0092, 2)
        ELSE 0
    END AS net_amount,
    CAST(b.charges_last_transaction_installments AS INT64) AS installments,
    b.charges_payment_method AS payment_method,
    b.charges_status AS status
FROM `SCHEMA_ORIGINAL.PAGARME_ORDERS` a
JOIN `SCHEMA_ORIGINAL.PAGARME_ORDERS_CHARGES` b
    ON a.id = b.order_id
JOIN fee f
    ON f.installments = b.charges_last_transaction_installments

UNION ALL

SELECT
    CAST(id AS STRING) AS id,
    DATETIME(date_created, "America/Sao_Paulo") AS date_created_brasilia,
    customer_name,
    customer_email,
    (paid_amount/100) AS amount,
    CAST(cost / 100 AS FLOAT64) AS cost,
    CASE
        WHEN payment_method = 'credit_card' AND status = 'paid' 
            THEN ROUND(paid_amount * f.percentage, 2)
        WHEN payment_method = 'pix' AND status = 'paid'
            THEN CAST(ROUND(paid_amount * 0.0092, 2) AS FLOAT64)
        ELSE 0
    END AS processing_fee,
    CASE
        WHEN status = 'paid' AND payment_method = 'credit_card'
            THEN ROUND(paid_amount - (paid_amount * f.percentage + 0.90), 2)
        WHEN status = 'paid' AND payment_method = 'pix'
            THEN ROUND(paid_amount - paid_amount * 0.0092, 2)
        ELSE 0
    END AS net_amount,
    c.installments,
    payment_method,
    status
FROM `SCHEMA_ORIGINAL.PAGARME_CUSTOMERS_LEGACY` c
JOIN fee f
    ON f.installments = c.installments;
